

## 1.扩张运算符
扩张运算符是怎么样的呢
以`...[]`形式

### 1.1运用于函数
```javascript
let arr = [1,2,3];
function total(a,b,c){
	console.log(a+b+c);
}
total(...arr)
```
### 1.2代替apply，将数组作为参数
```javascript
// ES5
var arr = [1,2,3];
function fun(x,y,z){
 ...
}
fun.apply(null,arr);

// ES6
let arr = [1,2,3]
function fun(x,y,z){

}
fun(...arr)

```

## 2.0扩展运算符应用
下面有些扩展运算符可能常见的应用
### 2.1合并数组
```
// ES5
[1, 2].concat(more)
// ES6
[1, 2, ...more]

var arr1 = ['a', 'b'];
var arr2 = ['c'];
var arr3 = ['d', 'e'];

// ES5的合并数组
arr1.concat(arr2, arr3);
// [ 'a', 'b', 'c', 'd', 'e' ]

// ES6的合并数组
[...arr1, ...arr2, ...arr3]
// [ 'a', 'b', 'c', 'd', 'e' ]

```
## 3.0将类数组转化为数组Array.from()
```javascript
let arrayLike = {
    '0': 'a',
    '1': 'b',
    '2': 'c',
    length: 3
};

// ES5的写法
var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']

// ES6的写法
let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']
```
### 3.1接收第二个参数，类似map方法
`Array.from`还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。
```javascript
Array.from(arrayLike, x => x * x);
// 等同于
Array.from(arrayLike).map(x => x * x);

Array.from([1, 2, 3], (x) => x * x)
// [1, 4, 9]
```
## 4.0将数值转化为数组，Array.of();
```javascript
Array.of(3, 11, 8) // [3,11,8]
Array.of(3) // [3]
Array.of(3).length // 1
```
